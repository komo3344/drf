{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst p_defer_1 = __importDefault(require(\"p-defer\"));\n\nfunction mapAgeCleaner(map, property = 'maxAge') {\n  let processingKey;\n  let processingTimer;\n  let processingDeferred;\n\n  const cleanup = () => __awaiter(this, void 0, void 0, function* () {\n    if (processingKey !== undefined) {\n      // If we are already processing an item, we can safely exit\n      return;\n    }\n\n    const setupTimer = item => __awaiter(this, void 0, void 0, function* () {\n      processingDeferred = p_defer_1.default();\n      const delay = item[1][property] - Date.now();\n\n      if (delay <= 0) {\n        // Remove the item immediately if the delay is equal to or below 0\n        map.delete(item[0]);\n        processingDeferred.resolve();\n        return;\n      } // Keep track of the current processed key\n\n\n      processingKey = item[0];\n      processingTimer = setTimeout(() => {\n        // Remove the item when the timeout fires\n        map.delete(item[0]);\n\n        if (processingDeferred) {\n          processingDeferred.resolve();\n        }\n      }, delay); // tslint:disable-next-line:strict-type-predicates\n\n      if (typeof processingTimer.unref === 'function') {\n        // Don't hold up the process from exiting\n        processingTimer.unref();\n      }\n\n      return processingDeferred.promise;\n    });\n\n    try {\n      for (const entry of map) {\n        yield setupTimer(entry);\n      }\n    } catch (_a) {// Do nothing if an error occurs, this means the timer was cleaned up and we should stop processing\n    }\n\n    processingKey = undefined;\n  });\n\n  const reset = () => {\n    processingKey = undefined;\n\n    if (processingTimer !== undefined) {\n      clearTimeout(processingTimer);\n      processingTimer = undefined;\n    }\n\n    if (processingDeferred !== undefined) {\n      // tslint:disable-line:early-exit\n      processingDeferred.reject(undefined);\n      processingDeferred = undefined;\n    }\n  };\n\n  const originalSet = map.set.bind(map);\n\n  map.set = (key, value) => {\n    if (map.has(key)) {\n      // If the key already exist, remove it so we can add it back at the end of the map.\n      map.delete(key);\n    } // Call the original `map.set`\n\n\n    const result = originalSet(key, value); // If we are already processing a key and the key added is the current processed key, stop processing it\n\n    if (processingKey && processingKey === key) {\n      reset();\n    } // Always run the cleanup method in case it wasn't started yet\n\n\n    cleanup(); // tslint:disable-line:no-floating-promises\n\n    return result;\n  };\n\n  cleanup(); // tslint:disable-line:no-floating-promises\n\n  return map;\n}\n\nexports.default = mapAgeCleaner; // Add support for CJS\n\nmodule.exports = mapAgeCleaner;\nmodule.exports.default = mapAgeCleaner;","map":null,"metadata":{},"sourceType":"script"}