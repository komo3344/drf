{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = require(\"C:\\\\Users\\\\ZB-PC087\\\\Desktop\\\\front-react\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nconst execa = require('execa');\n\nconst lcid = require('lcid');\n\nconst mem = require('mem');\n\nconst defaultOptions = {\n  spawn: true\n};\nconst defaultLocale = 'en_US';\n\nfunction getEnvLocale(env = process.env) {\n  return env.LC_ALL || env.LC_MESSAGES || env.LANG || env.LANGUAGE;\n}\n\nfunction parseLocale(string) {\n  const env = string.split('\\n').reduce((env, def) => {\n    const _def$split = def.split('='),\n          _def$split2 = _slicedToArray(_def$split, 2),\n          key = _def$split2[0],\n          value = _def$split2[1];\n\n    env[key] = value.replace(/^\"|\"$/g, '');\n    return env;\n  }, {});\n  return getEnvLocale(env);\n}\n\nfunction getLocale(string) {\n  return string && string.replace(/[.:].*/, '');\n}\n\nfunction getLocales() {\n  return execa.stdout('locale', ['-a']);\n}\n\nfunction getLocalesSync() {\n  return execa.sync('locale', ['-a']).stdout;\n}\n\nfunction getSupportedLocale(locale, locales = '') {\n  return locales.includes(locale) ? locale : defaultLocale;\n}\n\nfunction getAppleLocale() {\n  return Promise.all([execa.stdout('defaults', ['read', '-globalDomain', 'AppleLocale']), getLocales()]).then(results => getSupportedLocale(results[0], results[1]));\n}\n\nfunction getAppleLocaleSync() {\n  return getSupportedLocale(execa.sync('defaults', ['read', '-globalDomain', 'AppleLocale']).stdout, getLocalesSync());\n}\n\nfunction getUnixLocale() {\n  if (process.platform === 'darwin') {\n    return getAppleLocale();\n  }\n\n  return execa.stdout('locale').then(stdout => getLocale(parseLocale(stdout)));\n}\n\nfunction getUnixLocaleSync() {\n  if (process.platform === 'darwin') {\n    return getAppleLocaleSync();\n  }\n\n  return getLocale(parseLocale(execa.sync('locale').stdout));\n}\n\nfunction getWinLocale() {\n  return execa.stdout('wmic', ['os', 'get', 'locale']).then(stdout => {\n    const lcidCode = parseInt(stdout.replace('Locale', ''), 16);\n    return lcid.from(lcidCode);\n  });\n}\n\nfunction getWinLocaleSync() {\n  const _execa$sync = execa.sync('wmic', ['os', 'get', 'locale']),\n        stdout = _execa$sync.stdout;\n\n  const lcidCode = parseInt(stdout.replace('Locale', ''), 16);\n  return lcid.from(lcidCode);\n}\n\nmodule.exports = mem((options = defaultOptions) => {\n  const envLocale = getEnvLocale();\n  let thenable;\n\n  if (envLocale || options.spawn === false) {\n    thenable = Promise.resolve(getLocale(envLocale));\n  } else if (process.platform === 'win32') {\n    thenable = getWinLocale();\n  } else {\n    thenable = getUnixLocale();\n  }\n\n  return thenable.then(locale => locale || defaultLocale).catch(() => defaultLocale);\n});\nmodule.exports.sync = mem((options = defaultOptions) => {\n  const envLocale = getEnvLocale();\n  let res;\n\n  if (envLocale || options.spawn === false) {\n    res = getLocale(envLocale);\n  } else {\n    try {\n      res = process.platform === 'win32' ? getWinLocaleSync() : getUnixLocaleSync();\n    } catch (_) {}\n  }\n\n  return res || defaultLocale;\n});","map":null,"metadata":{},"sourceType":"script"}